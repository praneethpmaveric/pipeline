# This is a basic workflow to help you get started with Actions trigger

name: CI

# Controls when the workflow will run
on:
  push:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    
env:
  ## Sets environment variable

    
  # Allows you to run this workflow manually from the Actions tab files
  # workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout loan-underwriting-service
        uses: actions/checkout@v2

      - name: Run scanner for the repository
        continue-on-error: true
        run: |
          whispers ${{ github.workspace }} > whispers.txt
          .github/workflows/scripts/whispers.sh  
          
      - name: Setup Tag for image and branch
        run: |
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "NAMESPACE=loans-${GITHUB_REF##*/}" >> $GITHUB_ENV
               
      - name: Maven Build  
        run: ${{env.MAVEN}} clean package

      - name: SonarQube Scan
        if: env.BRANCH == 'sample' || env.BRANCH == 'dev'
        uses: unobankasia/sonarqube-action@v1.1.9
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}
          projectBaseDir: ./
          projectKey: ${{env.MICROSERVICES}}
          binaries: target/classes
          exclusions: ${{env.EXCLUDED_CLASS}}
      
      - name: SonarQube Quality Gate check
        if: env.BRANCH == 'sample' || env.BRANCH == 'dev'
        continue-on-error: true
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        with:
         scanMetadataReportFile: .scannerwork/report-task.txt
      
      - name: Docker Build  
        run: docker build -t $ECR_REPO:$IMAGE_TAG .
          
      - name: Configure AWS Credentials
        if: env.BRANCH != 'prod' 
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-region: ${{env.REGION}}
         role-to-assume: ${{env.ASSUME_ROLE}}
         role-duration-seconds: 1200
         role-skip-session-tagging: true
              
      - name: Configure AWS Credentials (PROD)
        if: env.BRANCH == 'prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-region: ${{env.REGION}}
         role-to-assume: ${{env.ASSUME_ROLE_PROD}}
         role-duration-seconds: 1200
         role-skip-session-tagging: true
          
      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        env:          
          ECR_URL: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPO:$IMAGE_TAG $ECR_URL/$ECR_REPO:$IMAGE_TAG
          docker push $ECR_URL/$ECR_REPO:$IMAGE_TAG
      
      - name: Update Image tag
        run: |
          git clone https://${{secrets.GIT_TOKEN}}@github.com/unobankasia/${{env.PLATFORM_REPO}}.git
          cd ${{env.PLATFORM_REPO}}/envs/${{env.BRANCH}}/03-applications/${{env.MICROSERVICES}}
          sed -i 's/tag.*/tag: "${{env.IMAGE_TAG}}"/' values.yaml
          git add values.yaml
          git commit -m "${{env.BRANCH}} | ${{env.MICROSERVICES}} | ${{env.IMAGE_TAG}}"
          git checkout -b $IMAGE_TAG
          git push -u origin $IMAGE_TAG
          gh pr create --fill
          sleep 10
          gh pr merge -sd 
          
      - name: Vulnerabilities
        run: | 
          sleep 30
          aws ecr describe-image-scan-findings --repository-name $ECR_REPO --image-id imageTag=$IMAGE_TAG --region ap-southeast-1 | jq .imageScanFindings.findingSeverityCounts
